#Create Table
create table student (
  student_id INT AUTO_Increment,
  name VARCHAR(25) not null,
  major VARCHAR(20) unique default 'undecided',
  primary key(student_id)
);
describe student;
drop table student;
select * from student;
#Add/Drop Column
alter table student ADD gpa DECIMAL(4,3);
alter table student drop column gpa;
#Add Row; Insert data
insert into student values(1,'Jack','Biology');
insert into student values(2,'Kate','Sociology');
insert into student(student_id,name) values(3,'Claire');
insert into student(student_id,name,major) values(4,'Jack','Chemistry');
insert into student(name,major) values('Mike','Computer Science');
select * from student; #show all info in table
Drop table student;
#Update Row / Delete Row
update student 
set major='Bio'
where major='Biology'; # not equal: <>
update student
set major='Comp Sci'
where student_id=5;
update student
set major='Biochemistry'
where major='Bio' or major='Chemistry';
update student
set name='Tom',major='undecided'
where student_id=3;
update student
set major='undecided';

delete from student; #delete all rows
delete from student
where student_id=3 and name='Tom';
#Querries
select name,major
from student; #show information
select student.name,student.major
from student
order by name DESC; #descend order
select student.name,student.major
from student
order by student_id ASC; #ascend order
select student.name,student.major
from student
order by name,student_id DESC; #subcolumn order
select *
from student
limit 2; #limit rows
select student_id,name
from student
where major<>'Bio' and name<>'kate'
order by student_id;
select *
from student
where name in ('Kate','Mike','Tom') and student_id>=2 and student_id<4;
drop table student;
#
CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT, #foreign key will be set later
  branch_id INT #foreign key will be set later
);
CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);
#set foreign key: set foreign key refering to the table already created
ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL; 
ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL; # in employee table, set branch_id super_id as foreign key
CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL ## If reference is delected, it will be set as Null in this table
);
# composite key 
CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id), 
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE, ## If employee.emp_id is deleted, same row in this table will be deleted
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);
CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000,null,null);
   #two foreign key in employee table: super_id, branch_id
   #super_id:Null branch_id: set to null because branch_id hasn't been created in branch table
INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');
   #we can set mgr_id(foreign key refer to emp_id) as 100 here because we have emp_id in employee table
UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;
# this is the other employee who are in branch 1 "Corporate"
INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);
# Branch 2
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);
INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');
UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;
INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);
# Branch 3
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);
INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');
UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;
INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);
-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');
-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);
-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

select * from works_with;
#Queries
select *
from employee
order by sex, first_name, last_name
limit 5;
select employee.first_name as forename, employee.last_name as surname
from employee;
select distinct sex # DISTINCT genders
from employee;

# FUNCTIONS in SQL
select count(super_id) #the number of employees who have supervisor
from employee;
select count(emp_id)
from employee
where sex='F' and birth_day>'1970-12-31';

select AVG(salary),sex  # Show Sex #sum(salary)
from employee
where sex="M";
select count(sex),sex # Aggregation
from employee
group by sex;
select sum(total_sales),client_id
from works_with
group by client_id;

# Wildcards: %: any number characters, _ : one character
select *
from branch_supplier
where supplier_name like '%Label%';
select *
from employee
where birth_day like '____-02%';

# Union: A list
select first_name as Company_Names
from employee
union   # Have to have same number of columns and columns are same type
select branch_name
from branch
union
select client_name
from client;
select client_name,branch_id
from client
union
select supplier_name,branch_id
from branch_supplier
order by client_name DESC
limit 7;

# Join : Rows from different tables based on related column
insert into branch values(4,'Buffalo',NULL,null)
select employee.emp_id,employee.first_name,branch.branch_name
from employee
join branch # general/inner join
on employee.emp_id=branch.mgr_id;
select employee.emp_id,employee.first_name,branch.branch_name
from employee
left join branch #left table  ## right join  ## full join
on employee.emp_id=branch.mgr_id;

# Nested Queries
  # Get employee names whose sales >30000
select first_name,last_name,emp_id
from employee
where employee.emp_id in (
   select emp_id
   from works_with
   where total_sales >30000
);

select client_name
from client
where branch_id in (
select branch_id
from employee
where first_name='Michael' and last_name='Scott'
);

#Trigger
#run in MYSQL terminal
use datasql
Delimiter $$ #run in MYSQL terminal
create
   trigger my_trigger before insert
   on employee
   for each row begin
   insert into trigger_test values('added new employee');
   end$$
Delimiter ;
# ......

#
create view examp as 
select emp_id, sex
from employee
where sex='F';

select * from examp;

create or replace view examp as
select emp_id, sex
from employee
where sex='M';

drop view examp;
